version: '3.9'

services:

  api-gateway:
    image: api-gateway
    container_name: api-gateway
    hostname: api-gateway
    build:
      context: ./ApiGateway/
      dockerfile: Dockerfile
    restart: always
    environment: 
      STAKEHOLDERS_SERVICE_ADDRESS: go-stakeholders-service:8093
      ENCOUNTERS_SERVICE_ADDRESS: go-encounter-service:8090
      GATEWAY_ADDRESS: ":9000"
    depends_on:
      - go-stakeholders-service
      - go-encounter-service
    networks:
      - database
    ports:
      - "9000:9000"
    expose:
      - "8093:8093"
      - "8090:8090"

  explorer:
    build:
      context: ./Backend/
      target: final
    networks:
      - database
    ports:
      - "44333:80"
    restart: on-failure
    environment:
      DATABASE_HOST: db
      DATABASE_PORT: 5433
      DATABASE_PASSWORD: super
      DATABASE_USER: postgres
      DATABASE_SCHEMA: explorer
      GO_TOUR_SERVICE_HOST: go-tour-service
      GO_ENCOUNTERS_SERVICE_HOST: go-encounter-service
      GO_FOLLOWER_SERVICE_HOST: go-follower-service
    depends_on:
      - db
      - go-tour-service
      - go-encounter-service
      - go-follower-service

  go-encounter-service:
    build:
      context: ./Encounters/
    ports:
      - "8090:8090"
    restart: on-failure
    networks:
      - database
    depends_on:
      - db
    environment:
      - DATABASE_URL=host=db user=postgres password=super dbname=encountersdb port=5433 sslmode=disable

  go-stakeholders-service:
    build:
      context: ./Stakeholders/
    ports:
      - "8093:8093"
    restart: on-failure
    networks:
      - database
    depends_on:
      - db
    environment:
      - DATABASE_URL2=host=db user=postgres password=super dbname=usersdb port=5433 sslmode=disable

  go-tour-service:
    build:
      context: ./Tours/
    ports:
      - "8082:8082"
    restart: on-failure
    networks:
      - database
    environment:
      # protocol://username:password@hostname:port
      - MONGO_DB_URI=mongodb://root:pass@mongo:27017
      # - MONGO_DB_URI=mongodb://mongo:27017
    depends_on:
      mongo:
        condition: service_healthy
        
  go-follower-service:
    build:
      context: ./Followers/
    restart: on-failure
    ports:
      - "8060:8060"
    networks:
      - database
    environment:
      - PORT=8060
      - NEO4J_DB=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASS=nekaSifra
    depends_on:
      neo4j:
        condition: service_healthy

  # NoSQL: Neo4J DB
  neo4j:
    image: neo4j
    restart: always
    ports:
      # bolt
      - "7687:7687"
      # http
      - "7474:7474"
      # https
      - "7473:7473"
    # Docker healtcheck - checks if database is "alive"
    networks:
      - database
    healthcheck:
      # test: [ "CMD-SHELL", "echo RETURN 1 | cypher-shell -a <NEO4J_dbms_connector_bolt_listen__address> -u <user defined username> -p <user defined password> || exit 1" ]
      test:
        [
          "CMD-SHELL",
          "echo RETURN 1 | cypher-shell -a bolt://neo4j:7687 -u neo4j -p nekaSifra || exit 1",
        ]
      interval: 5s
      timeout: 5s
      retries: 10
    environment:
      - NEO4J_AUTH=neo4j/nekaSifra
    volumes:
      - neo4j_data:/data

  db:
    image: postgres:latest
    restart: always
    networks:
      - database
    ports:
      - "5433:5433"
    volumes:
      - ./db_init.sh:/docker-entrypoint-initdb.d/db_init.sh
      - ./usersdb_init.sql:/docker-entrypoint-initdb.d/usersdb_init.sql
      - type: bind
        source: explorer-init-data.sql
        target: /tmp/explorer-init.sql
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: super
      POSTGRES_MULTIPLE_DATABASES: tourdb,explorer,encountersdb,usersdb
      PGPORT: 5433

  mongo:
    image: mongo
    restart: always
    networks:
      - database
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: pass
      MONGO_INITDB_DATABASE: mongoDemo
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - mongo_store:/data/db

  mongo-express:
    image: mongo-express
    restart: always
    networks:
      - database
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=pass
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin
      - ME_CONFIG_MONGODB_URL=mongodb://mongo:27017/
    depends_on:
      - mongo
    ports:
      - "8081:8081"
    volumes:
      - mongo_express_data:/data/db

volumes:
  mongo_store:
  mongo_express_data:
  neo4j_data:


networks:
  database:
    name: database
    driver: bridge

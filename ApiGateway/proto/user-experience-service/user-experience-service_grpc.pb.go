// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: user-experience-service/user-experience-service.proto

package user_experience_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserExperienceService_FindByUserId_FullMethodName = "/UserExperienceService/FindByUserId"
	UserExperienceService_AddXP_FullMethodName        = "/UserExperienceService/AddXP"
	UserExperienceService_Create_FullMethodName       = "/UserExperienceService/Create"
	UserExperienceService_Delete_FullMethodName       = "/UserExperienceService/Delete"
	UserExperienceService_Update_FullMethodName       = "/UserExperienceService/Update"
)

// UserExperienceServiceClient is the client API for UserExperienceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserExperienceServiceClient interface {
	FindByUserId(ctx context.Context, in *FindByUserIdRequest, opts ...grpc.CallOption) (*UserExperience, error)
	AddXP(ctx context.Context, in *AddXPRequest, opts ...grpc.CallOption) (*UserExperience, error)
	Create(ctx context.Context, in *UserExperience, opts ...grpc.CallOption) (*UserExperience, error)
	Delete(ctx context.Context, in *UserExperience, opts ...grpc.CallOption) (*DeleteUserExperienceResponse, error)
	Update(ctx context.Context, in *UserExperience, opts ...grpc.CallOption) (*UserExperience, error)
}

type userExperienceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserExperienceServiceClient(cc grpc.ClientConnInterface) UserExperienceServiceClient {
	return &userExperienceServiceClient{cc}
}

func (c *userExperienceServiceClient) FindByUserId(ctx context.Context, in *FindByUserIdRequest, opts ...grpc.CallOption) (*UserExperience, error) {
	out := new(UserExperience)
	err := c.cc.Invoke(ctx, UserExperienceService_FindByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userExperienceServiceClient) AddXP(ctx context.Context, in *AddXPRequest, opts ...grpc.CallOption) (*UserExperience, error) {
	out := new(UserExperience)
	err := c.cc.Invoke(ctx, UserExperienceService_AddXP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userExperienceServiceClient) Create(ctx context.Context, in *UserExperience, opts ...grpc.CallOption) (*UserExperience, error) {
	out := new(UserExperience)
	err := c.cc.Invoke(ctx, UserExperienceService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userExperienceServiceClient) Delete(ctx context.Context, in *UserExperience, opts ...grpc.CallOption) (*DeleteUserExperienceResponse, error) {
	out := new(DeleteUserExperienceResponse)
	err := c.cc.Invoke(ctx, UserExperienceService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userExperienceServiceClient) Update(ctx context.Context, in *UserExperience, opts ...grpc.CallOption) (*UserExperience, error) {
	out := new(UserExperience)
	err := c.cc.Invoke(ctx, UserExperienceService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserExperienceServiceServer is the server API for UserExperienceService service.
// All implementations must embed UnimplementedUserExperienceServiceServer
// for forward compatibility
type UserExperienceServiceServer interface {
	FindByUserId(context.Context, *FindByUserIdRequest) (*UserExperience, error)
	AddXP(context.Context, *AddXPRequest) (*UserExperience, error)
	Create(context.Context, *UserExperience) (*UserExperience, error)
	Delete(context.Context, *UserExperience) (*DeleteUserExperienceResponse, error)
	Update(context.Context, *UserExperience) (*UserExperience, error)
	mustEmbedUnimplementedUserExperienceServiceServer()
}

// UnimplementedUserExperienceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserExperienceServiceServer struct {
}

func (UnimplementedUserExperienceServiceServer) FindByUserId(context.Context, *FindByUserIdRequest) (*UserExperience, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByUserId not implemented")
}
func (UnimplementedUserExperienceServiceServer) AddXP(context.Context, *AddXPRequest) (*UserExperience, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddXP not implemented")
}
func (UnimplementedUserExperienceServiceServer) Create(context.Context, *UserExperience) (*UserExperience, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUserExperienceServiceServer) Delete(context.Context, *UserExperience) (*DeleteUserExperienceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUserExperienceServiceServer) Update(context.Context, *UserExperience) (*UserExperience, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUserExperienceServiceServer) mustEmbedUnimplementedUserExperienceServiceServer() {}

// UnsafeUserExperienceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserExperienceServiceServer will
// result in compilation errors.
type UnsafeUserExperienceServiceServer interface {
	mustEmbedUnimplementedUserExperienceServiceServer()
}

func RegisterUserExperienceServiceServer(s grpc.ServiceRegistrar, srv UserExperienceServiceServer) {
	s.RegisterService(&UserExperienceService_ServiceDesc, srv)
}

func _UserExperienceService_FindByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserExperienceServiceServer).FindByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserExperienceService_FindByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserExperienceServiceServer).FindByUserId(ctx, req.(*FindByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserExperienceService_AddXP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddXPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserExperienceServiceServer).AddXP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserExperienceService_AddXP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserExperienceServiceServer).AddXP(ctx, req.(*AddXPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserExperienceService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserExperience)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserExperienceServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserExperienceService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserExperienceServiceServer).Create(ctx, req.(*UserExperience))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserExperienceService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserExperience)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserExperienceServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserExperienceService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserExperienceServiceServer).Delete(ctx, req.(*UserExperience))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserExperienceService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserExperience)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserExperienceServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserExperienceService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserExperienceServiceServer).Update(ctx, req.(*UserExperience))
	}
	return interceptor(ctx, in, info, handler)
}

// UserExperienceService_ServiceDesc is the grpc.ServiceDesc for UserExperienceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserExperienceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UserExperienceService",
	HandlerType: (*UserExperienceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindByUserId",
			Handler:    _UserExperienceService_FindByUserId_Handler,
		},
		{
			MethodName: "AddXP",
			Handler:    _UserExperienceService_AddXP_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _UserExperienceService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserExperienceService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserExperienceService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user-experience-service/user-experience-service.proto",
}
